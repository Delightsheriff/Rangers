openapi: 3.0.0
info:
  title: SplitWise API
  description: API documentation for SplitWise application
  version: 1.0.0

components:
  schemas:
    Register:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
      properties:
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6

    Login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 1

    UpdateUser:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1
      description: "At least one of 'firstName' or 'lastName' must be provided."

    RefreshToken:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          minLength: 1

    ForgotPassword:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    ResetPassword:
      type: object
      required:
        - token
        - password
      properties:
        token:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 6

    CreateGroup:
      type: object
      required:
        - groupName
        - members
      properties:
        groupName:
          type: string
          minLength: 2
        groupDescription:
          type: string
        members:
          type: array
          items:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
          minItems: 1

    AddMember:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    CreateExpense:
      type: object
      required:
        - groupId
        - description
        - amount
        - paidBy
      properties:
        groupId:
          type: string
          minLength: 1
        description:
          type: string
          minLength: 1
        amount:
          type: number
          minimum: 0.01
        paidBy:
          type: array
          items:
            type: object
            required:
              - userId
              - amountPaid
            properties:
              userId:
                type: string
                minLength: 1
              amountPaid:
                type: number
                minimum: 0.01
          minItems: 1

    UpdateExpense:
      type: object
      properties:
        description:
          type: string
        amount:
          type: number
          minimum: 0.01
        paidBy:
          type: array
          items:
            type: object
            required:
              - userId
              - amountPaid
            properties:
              userId:
                type: string
                minLength: 1
              amountPaid:
                type: number
                minimum: 0.01

    PaidExpense:
      type: array
      items:
        type: object
        required:
          - userId
          - amountPaid
        properties:
          userId:
            type: string
            minLength: 1
          amountPaid:
            type: number
            minimum: 0.01

paths:
  /api/auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Missing fields or email already in use
        '500':
          description: Internal server error

  /api/auth/login:
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Login successful, tokens returned
        '400':
          description: Invalid credentials
        '500':
          description: Internal server error

  /api/auth/refresh-token:
    post:
      summary: Refresh access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: New access token generated
        '400':
          description: Missing token
        '403':
          description: Invalid or expired token
        '500':
          description: Internal server error

  /api/auth/logout:
    post:
      summary: Logout user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully logged out
        '500':
          description: Internal server error

  /api/auth/forgot-password:
    post:
      summary: Forgot password - send reset link
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Password reset email sent
        '400':
          description: Missing email
        '404':
          description: User not found
        '500':
          description: Failed to send email

  /api/auth/reset-password:
    post:
      summary: Reset password using token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Invalid or expired token
        '500':
          description: Internal server error

  /api/users/{id}:
    get:
      summary: Get user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
        '404':
          description: User not found
        '500':
          description: Internal server error

    patch:
      summary: Update user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: User updated
        '400':
          description: Email already in use
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error

    delete:
      summary: Delete user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error
  /api/groups:
    post:
      summary: Create a new group
      tags:
        - Groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroup'
      responses:
        '201':
          description: Group created successfully
        '400':
          description: Missing group name or members
        '404':
          description: Creator not found
        '500':
          description: Internal server error

  /api/groups/user:
    get:
      summary: Get all groups for the authenticated user
      tags:
        - Groups
      responses:
        '200':
          description: List of user groups
        '500':
          description: Internal server error

  /api/groups/{groupId}:
    get:
      summary: Get a group by ID
      tags:
        - Groups
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Group details
        '403':
          description: Forbidden (not a member)
        '404':
          description: Group not found
        '500':
          description: Internal server error

    delete:
      summary: Delete a group
      tags:
        - Groups
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Group deleted successfully
        '403':
          description: Only the creator can delete the group
        '404':
          description: Group not found
        '500':
          description: Internal server error

  /api/groups/{groupId}/leave:
    patch:
      summary: Leave a group
      tags:
        - Groups
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully left the group
        '400':
          description: Creator cannot leave the group
        '403':
          description: Forbidden (not a member)
        '404':
          description: Group not found
        '500':
          description: Internal server error

  /api/groups/{groupId}/members:
    post:
      summary: Add a member to a group
      tags:
        - Groups
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMember'
      responses:
        '200':
          description: Member added or invitation sent
        '400':
          description: Email missing or user already a member
        '403':
          description: Forbidden (not a member)
        '404':
          description: Group not found
        '500':
          description: Internal server error

  /api/expenses:
    post:
      summary: Create a new expense
      tags:
        - Expenses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExpense'
      responses:
        '201':
          description: Expense created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateExpense'
        '400':
          description: Invalid request body
        '404':
          description: Group not found
        '500':
          description: Internal server error

  /api/expenses/group/{groupId}:
    get:
      summary: Get all expenses for a group
      tags:
        - Expenses
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of expenses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreateExpense'
        '500':
          description: Internal server error

  /api/expenses/{expenseId}:
    get:
      summary: Get a single expense
      tags:
        - Expenses
      parameters:
        - in: path
          name: expenseId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expense details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateExpense'
        '404':
          description: Expense not found
        '500':
          description: Internal server error

    patch:
      summary: Update an expense
      tags:
        - Expenses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateExpense'
      parameters:
        - in: path
          name: expenseId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Updated expense
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateExpense'
        '404':
          description: Expense not found
        '500':
          description: Internal server error

    delete:
      summary: Delete an expense
      tags:
        - Expenses
      parameters:
        - in: path
          name: expenseId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expense deleted successfully
        '404':
          description: Expense not found
        '500':
          description: Internal server error

  /api/expenses/user/{userId}:
    get:
      summary: Get all expenses for a user
      tags:
        - Expenses
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of user expenses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreateExpense'
        '500':
          description: Internal server error

  /api/expenses/paid/{expenseId}:
    patch:
      summary: Mark an expense as paid
      tags:
        - Expenses
      parameters:
        - in: path
          name: expenseId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaidExpense'
      responses:
        '200':
          description: Expense updated with new payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateExpense'
        '404':
          description: Expense not found
        '500':
          description: Internal server error

